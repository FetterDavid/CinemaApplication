@page "/movies/edit/{id:int}"
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@using CinemaApplication.Client.Shared
@using CinemaApplication.Client.Services;
@using CinemaApplication.Shared;
@inject IMovieService MovieService;
@inject IDirectorService DirectorService;
@inject NavigationManager NavigationManager

@if (Movie is null || Directors is null)
{
    <p>Loading...</p>
}
else
{
    <h3>Edit @Movie.Title</h3>

    <MovieForm Movie="@Movie" ButtonTitle="Edit" HandleValidSubmitAsync="@HandleValidSubmitAsync" Directors="Directors" />
    <table>
        <tr>
            <td><button onclick="@HandleDeleteAsync" class="btn btn-danger form-control">Delete</button></td>
            <td><button onclick="@HandleBack" class="btn btn-secondary form-control">Back</button></td>
        </tr>
    </table>


}

@code {
    [Parameter]
    public int Id { get; set; }

    private Movie? Movie { get; set; }

    private IEnumerable<Director> Directors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Movie = await MovieService.GetMovieByIdAsync(Id);
        Directors = await DirectorService.GetAllDirectorAsync();
    }

    private async Task HandleValidSubmitAsync()
    {
        Movie.DirectorId = Directors.FirstOrDefault(x => x.Name == Movie.DirectorName).DirectorId;
        await MovieService.UpdateMovieAsync(Id, Movie!);
        NavigationManager.NavigateTo("/movies");
    }

    private async Task HandleDeleteAsync()
    {
        await MovieService.DeleteMovieAsync(Id);
        NavigationManager.NavigateTo("/movies");
    }

    private void HandleBack()
    {
        NavigationManager.NavigateTo("/movies");
    }
}
