@using CinemaApplication.Shared;

@if (Movie is null || HandleValidSubmitAsync is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@Movie" OnValidSubmit="@HandleValidSubmitAsync">
        <DataAnnotationsValidator />
        <div class="mb0">
            <label class="col-form-label">Title</label>
            <InputText @bind-Value="@Movie.Title" class="form-control" />
            <ValidationMessage For="() => Movie.Title" />
        </div>
        <div class="mb0">
            <label class="col-form-label">Category</label>
            <InputText @bind-Value="@Movie.Category" class="form-control" />
            <ValidationMessage For="() => Movie.Category" />
        </div>
        <div class="mb0">
            <label class="col-form-label">Publication Year</label>
            <InputNumber @bind-Value="@Movie.PublicationYear" class="form-control" />
            <ValidationMessage For="() => Movie.PublicationYear" />
        </div>
        <div class="mb0">
            <label class="col-form-label">Director</label>
            <select id="categorySelect" @bind="@Movie.DirectorName" class="form-control">
                @foreach (var category in directorNames)
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
        <div class="mb0">
            <label class="col-form-label">Movie Image</label>
            <InputFile OnChange="@UploadImage" class="form-control" />
            @if (Movie.Image != null)
            {
                <img src="@($"data:image/png;base64,{Convert.ToBase64String(Movie.Image)}")" style="max-width: 200px; max-height: 200px;" />
            }
        </div>
        <table>
            <tr>
                <td><button style="margin-top:10px" type="submit" class="btn btn-primary form-control mb-3">@ButtonTitle</button></td>
            </tr>
        </table>
    </EditForm>
}

@code {
    [Parameter]
    public Movie? Movie { get; set; }

    [Parameter]
    public string? ButtonTitle { get; set; }

    [Parameter]
    public Func<Task>? HandleValidSubmitAsync { get; set; }

    [Parameter]
    public IEnumerable<Director>? Directors { get; set; }

    private List<string> directorNames = new List<string>();

    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        if (imageFiles.Count > 0)
        {
            var imageFile = imageFiles.First();
            if (imageFile != null)
            {
                using var stream = imageFile.OpenReadStream();
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                Movie.Image = ms.ToArray();
            }
        }
    }

    protected override void OnInitialized()
    {
        Movie.DirectorName = Directors.FirstOrDefault(x => x.DirectorId == Movie.DirectorId)?.Name ?? Directors.First().Name;
        directorNames.AddRange(Directors.Select(x => x.Name));
    }
}
