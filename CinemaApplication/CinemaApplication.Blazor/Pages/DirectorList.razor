@page "/directors"
@using CinemaApplication.Blazor.Services;
@using CinemaApplication.Contract;
@inject IDirectorService DirectorService;
@inject IMovieService MovieService;
@inject NavigationManager NavigationManager

@if (Directors == null)
{
    <p>Loading...</p>
}
else
{
    <h3>Movie List</h3>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Year of birth</th>
                <th>Directed Movies</th>
                <th><a href="directors/add" class="btn btn-primary btn-lg active" role="button" aria-pressed="true">Add Director</a></th>
            </tr>
        </thead>
        @foreach (Director director in Directors)
        {
            <tr>
                <td>@director.Name</td>
                <td>@director.YearOfBirth</td>
                <td>
                    <ul>
                        @foreach (Movie movie in director.DirectedMovies)
                        {
                            <li><a href="movies/edit/@movie.MovieId">@movie.Title</a></li>
                        }
                    </ul>
                </td>
                <td>
                    <a href="directors/edit/@director.DirectorId" class="btn btn-primary btn-lg active" role="button" aria-pressed="true">Edit</a>
                    <button @onclick="() => HandleDeleteAsync(director.DirectorId)" class="btn btn-danger btn-lg active" role="button" aria-pressed="true">Delete</button>
                </td>
            </tr>
        }
    </table>
}

@code {
    private IEnumerable<Director>? Directors { get; set; }

    private async Task HandleDeleteAsync(int id)
    {
        await DirectorService.DeleteDirectorWithMoviesAsync(id);
        NavigationManager.NavigateTo("/directors", true);
    }

    protected async override Task OnInitializedAsync()
    {
        Directors = await DirectorService.GetAllDirectorAsync();
        foreach (Director director in Directors)
        {
            director.DirectedMovies = (await MovieService.GetMovieByDirectorIdAsync(director.DirectorId)).ToList();
        }
    }
}
