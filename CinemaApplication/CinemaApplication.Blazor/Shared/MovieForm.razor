@using CinemaApplication.Contract;

@if (Movie is null || HandleValidSubmitAsync is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@Movie" OnValidSubmit="@HandleValidSubmitAsync">
        <div class="mb0">
            <label class="col-form-label">Title</label>
            <InputText @bind-Value="@Movie.Title" class="form-control" />
        </div>
        <div class="mb0">
            <label class="col-form-label">Category</label>
            <InputText @bind-Value="@Movie.Category" class="form-control" />
        </div>
        <div class="mb0">
            <label class="col-form-label">Publication Year</label>
            <InputNumber @bind-Value="@Movie.PublicationYear" class="form-control" />
        </div>
        <div class="mb0">
            <label class="col-form-label">Director</label>
            <select id="categorySelect" @bind="@Movie.DirectorName" class="form-control">
                @foreach (var category in directorNames)
                {
                    <option value="@category">@category</option>
                }
            </select>
        </div>
        <table>
            <tr>
                <td><button style="margin-top:10px" type="submit" class="btn btn-primary form-control mb-3">@ButtonTitle</button></td>
            </tr>
        </table>
    </EditForm>
}

@code {
    [Parameter]
    public Movie? Movie { get; set; }

    [Parameter]
    public string? ButtonTitle { get; set; }

    [Parameter]
    public Func<Task>? HandleValidSubmitAsync { get; set; }

    [Parameter]
    public IEnumerable<Director>? Directors { get; set; }

    private List<string> directorNames = new List<string>();


    protected override void OnInitialized()
    {
        Movie.DirectorName = Directors.FirstOrDefault(x => x.DirectorId == Movie.DirectorId)?.Name ?? Directors.First().Name;
        directorNames.AddRange(Directors.Select(x => x.Name));
    }
}
